package com.nitdrv.employeemanager.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployeeProjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeProjectAllPropertiesEquals(EmployeeProject expected, EmployeeProject actual) {
        assertEmployeeProjectAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeeProjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeProjectAllUpdatablePropertiesEquals(EmployeeProject expected, EmployeeProject actual) {
        assertEmployeeProjectUpdatableFieldsEquals(expected, actual);
        assertEmployeeProjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeProjectAutoGeneratedPropertiesEquals(EmployeeProject expected, EmployeeProject actual) {
        assertThat(expected)
            .as("Verify EmployeeProject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeProjectUpdatableFieldsEquals(EmployeeProject expected, EmployeeProject actual) {
        assertThat(expected)
            .as("Verify EmployeeProject relevant properties")
            .satisfies(e -> assertThat(e.getDateFrom()).as("check dateFrom").isEqualTo(actual.getDateFrom()))
            .satisfies(e -> assertThat(e.getDateTo()).as("check dateTo").isEqualTo(actual.getDateTo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeProjectUpdatableRelationshipsEquals(EmployeeProject expected, EmployeeProject actual) {
        assertThat(expected)
            .as("Verify EmployeeProject relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()));
    }
}
